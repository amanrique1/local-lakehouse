# ruff.toml - Linter and formatter configuration for local_lakehouse project

# ============================================================================
# TARGET & LINE LENGTH
# ============================================================================
target-version = "py311"  # Target Python 3.11
line-length = 100         # Maximum line length

# ============================================================================
# FILE DISCOVERY
# ============================================================================
# Exclude directories that don't need linting
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".ruff_cache",
    "logs",           # Airflow logs
    "plugins",        # Airflow plugins directory (if auto-generated)
    "dbt_packages",   # dbt installed packages
    "target",         # dbt compilation output
    "dbt_modules",    # Legacy dbt packages
]

# Include only Python files in relevant directories
include = [
    "dags/**/*.py",
    "tests/**/*.py",
]

# ============================================================================
# LINTING RULES
# ============================================================================
[lint]
# Select rule categories to enable
select = [
    # Pyflakes (F) - Basic Python errors
    "F",

    # pycodestyle (E, W) - PEP 8 style conventions
    "E",
    "W",

    # isort (I) - Import sorting
    "I",

    # pydocstyle (D) - Docstring conventions
    "D",

    # pyupgrade (UP) - Automatically upgrade syntax for newer Python versions
    "UP",

    # flake8-bugbear (B) - Find likely bugs and design problems
    "B",

    # flake8-simplify (SIM) - Simplify Python code
    "SIM",

    # flake8-comprehensions (C4) - Better list/dict/set comprehensions
    "C4",

    # flake8-bandit (S) - Security issues
    "S",

    # flake8-builtins (A) - Avoid shadowing Python builtins
    "A",

    # flake8-logging-format (G) - Logging best practices
    "G",

    # Pylint (PL) - Additional checks
    "PL",

    # Airflow-specific (AIR) - Airflow best practices
    "AIR",

    # Pandas (PD) - Pandas best practices
    "PD",
]

# Disable specific rules that are too strict or conflict with Airflow patterns
ignore = [

    # String handling rules
    "G004", # Use % formatting in logging functions (conflicts with f-strings)

    # Docstring rules (adjust based on your documentation standards)
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # Multi-line docstring summary should start at the second line (conflicts with D212)

    # Security rules that can be noisy in data pipelines
    "S101",  # Use of assert detected (common in tests and data validation)
    "S608",  # Possible SQL injection vector (too many false positives with dbt/Trino)

    # Simplify rules that can conflict with Airflow patterns
    "SIM108",  # Use ternary operator instead of if-else (sometimes less readable)

    # Allow lambda expressions (common in Airflow XComs and task dependencies)
    "E731",  # Do not assign a lambda expression

    # Pylint rules that are too strict
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison

    # Indentation rules
    "W191",  # Indentation contains tabs (if using tabs for indentation)
    "D206",  # Docstring should be indented (conflicts with tab indentation)
]

# ============================================================================
# PER-FILE RULE OVERRIDES
# ============================================================================
[lint.per-file-ignores]
# Test files can have additional relaxed rules
"tests/**/*.py" = [
    "S101",    # Allow asserts in tests
    "D103",    # Missing docstring in public function
    "PLR2004", # Allow magic values in tests
]

# DAG files may have imports at module level that are used implicitly by Airflow
"dags/**/*.py" = [
    "E402",  # Module level import not at top of file (common for Airflow context)
]

# __init__.py files don't need docstrings
"__init__.py" = ["D104"]

# ============================================================================
# IMPORT SORTING (isort)
# ============================================================================
[lint.isort]
# Organize imports into sections
known-first-party = ["dags", "custom_operator"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "airflow",
    "dbt",
    "first-party",
    "local-folder",
]

[lint.isort.sections]
# Custom section for Airflow imports
"airflow" = ["airflow", "airflow_kubernetes"]
# Custom section for dbt imports
"dbt" = ["dbt"]

# ============================================================================
# DOCSTRING CONVENTIONS (pydocstyle)
# ============================================================================
[lint.pydocstyle]
# Use Google-style docstrings (common in data engineering)
# Alternatives: "numpy", "pep257"
convention = "google"

# ============================================================================
# FLAKE8-BUGBEAR
# ============================================================================
[lint.flake8-bugbear]
# Allow default arguments like [], {} (common in Airflow DAGs)
extend-immutable-calls = [
    "airflow.models.Variable.get",
    "airflow.models.Connection.get_connection_from_secrets",
]

# ============================================================================
# FORMATTING (when using `ruff format`)
# ============================================================================
[format]
# Use double quotes for strings
quote-style = "double"

# Use tabs for indentation
indent-style = "tab"

# Respect magic trailing commas (preserves developer intent)
skip-magic-trailing-comma = false

# Line ending style
line-ending = "auto"  # Use \n on Unix, \r\n on Windows
